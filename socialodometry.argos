<?xml version="1.0" ?>
<argos-configuration>

  <!-- ************************* -->
  <!-- * General configuration * -->
  <!-- ************************* -->
  <framework>
    <!--
        System configuration:
        - threads: the number of slave threads to parallelize the
          computation. For less than 100 robots thread management is not
          beneficial, so here we set it to 0. When set to 0, it means that
          the computation is not parallelized: the main thread does
          everything.
    -->
    <system threads="0" />
    <!--
        Experiment configuration:
        - length: total experiment time in seconds (0 means the experiment
          has no time limit)
        - ticks_per_second: number of ticks per second (int value)
        - random_seed: seed of the main random number generator. If unset
          or set to zero, this value is taken from the clock and a warning
          message is displayed.
    -->
    <experiment length="0"
                ticks_per_second="10"
                random_seed="124" />
  </framework>

  <!-- *************** -->
  <!-- * Controllers * -->
  <!-- *************** -->
  <controllers>

    <!-- 
        Here you list the controllers to be used in the experiment.
        The attributes are:
        - id: a unique a identifier for this controller, to be used in the
          subsequent <arena> section to say which robots use which
          controller
    -->
    <buzz_controller_footbot id="fbc">
      <!--
          The <actuators> section contains a list of the actuators used by
          this controller.
          If you forget a to mention an actuator here and then request it
          in the controller, an error occurs.
          For a list of the possible actuators, type at the command prompt:
          $ launch_argos -q actuators

          Multiple implementations of an actuator are possible. To
          identify which one you want to use, pass it in the
          'implementation' attribute below. When you type the 'argos3 -q'
          command, the implementation is in the square brackets following
          the name of the device:

          $ argos3 -q actuators
          ...
          footbot_wheels [default]
          ...
      -->
      <actuators>
        <differential_steering implementation="default" />
        <range_and_bearing implementation="default" />
        <leds implementation="default" medium="leds" />
      </actuators>
      <!--
          The <sensors> section contains a list of the sensors used by
          this controller.
          If you forget a to mention a sensor here and then request it in
          the controller, an error occurs.
          For a list of the possible sensors, type at the command prompt:
          $ argos3 -q sensors
      -->
      <sensors>
        <footbot_proximity implementation="default" show_rays="true" />
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" noise_std_dev="0" />
        <positioning implementation="default" />
      </sensors>
      <!--
          The <params> section is passed as-is to the controller's Init()
          function.
          The user, writing the controller, defines how it is organized.
      -->
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="12" />
      </params>
    </buzz_controller_footbot>

  </controllers>


  <!-- ****************** -->
  <!-- * Loop functions * -->
  <!-- ****************** -->
  <!--
      Experiment configuration:
      - outfile: the output file name
      - tasks: parameter 'N_t' in the slides
      - robots: parameter 'N_u' in the slides
      - msg_size: max size of a message in bytes
  -->

  <loop_functions library="build/libcbaa"
                  label="socialodometry"
                  outfile="data.dat"
                  tasks="1"
                  robots="15"
                  commsRange="5.0"
                  msg_size="300"
                  nest_one_pos_x="-8.0"
                  nest_one_pos_y="-8.0"
                  food_one_pos_x="3.0"
                  food_one_pos_y="3.0">

  </loop_functions>  


  <!-- *********************** -->
  <!-- * Arena configuration * -->
  <!-- *********************** -->
  <!--
      Here you place all the objects in the arena.
      All linear measures are expressed in meters.
      Angles are expressed in degrees.
      The 'size' attribute contains the size of the arena around the
      origin.
      To get help about which entities are available, type at the command
      prompt:
      
      $ argos3 -q entities

      and to get help about a specific entity (for instance, the box)

      $ argos3 -q box
  -->
  <arena size="25, 25, 1" center="0,0,0.5">x

    <!-- Place four boxes in a square to delimit the arena -->
    <box id="wall_north" size="25,0.1,0.5" movable="false">
      <body position="0,12.5,0" orientation="0,0,0" />
    </box>
    <box id="wall_south" size="25,0.1,0.5" movable="false">
      <body position="0,-12.5,0" orientation="0,0,0" />
    </box>
    <box id="wall_east" size="0.1,25,0.5" movable="false">
      <body position="12.5,0,0" orientation="0,0,0" />
    </box>
    <box id="wall_west" size="0.1,25,0.5" movable="false">
      <body position="-12.5,0,0" orientation="0,0,0" />
    </box>

    <floor id="floor"
    source="loop_functions"
    pixels_per_meter="50" />

    <!--
        You can distribute entities randomly. Here, we distribute
        10 foot-bots in this way:
        - the position is uniformly distributed
        on the ground, in the square whose corners are (-2,-2) and (2,2)
        - the orientations are non-zero only when rotating around Z and chosen
        from a gaussian distribution, whose mean is zero degrees and
        standard deviation is 360 degrees.
    -->
    <!-- <distribute>
      <position method="uniform" min="-12,-12,0" max="12,12,0" />
      <orientation method="gaussian" mean="0,0,0" std_dev="360,0,0" />
      <entity quantity="40" max_trials="100">
        <foot-bot id="fb" rab_data_size="250">
          <controller config="bfc" />
        </foot-bot>
      </entity>
    </distribute> -->

    <!--
        We distribute 5 boxes uniformly in position and rotation around Z.
    -->
    <!-- <distribute>
      <position method="uniform" min="-2,-2,0" max="2,2,0" />
      <orientation method="uniform" min="0,0,0" max="360,0,0" />
      <entity quantity="5" max_trials="100">
        <box id="b" size="0.3,0.3,0.5" movable="false" />
      </entity>
    </distribute> -->

    <!--
        We distribute cylinders uniformly in position and with
        constant rotation (rotating a cylinder around Z does not
        matter)
    -->
    <!-- <distribute>
      <position method="uniform" min="-2,-2,0" max="2,2,0" />
      <orientation method="constant" values="0,0,0" />
      <entity quantity="5" max_trials="100">
        <cylinder id="c" height="0.5" radius="0.15" movable="false" />
      </entity>
    </distribute>  -->

  </arena>

  <!-- ******************* -->
  <!-- * Physics engines * -->
  <!-- ******************* -->
  <!--
      In ARGoS, multiple physics engines can run at the same time.
      In this section you say which engines to use for the experiment.
      To know which engines are available, type at the command prompt:
      
      $ argos3 -q physics_engines
  -->
  <physics_engines>
    <!--
        Use a 2D dynamics engine.
    -->
    <dynamics2d id="dyn2d" />
  </physics_engines>

  <!-- ********* -->
  <!-- * Media * -->
  <!-- ********* -->
  <!--
      Here you specify the media in use. Media allow robots to communicate.
      To know which media are available, type at the command prompt:

      $ argos3 -q media
  -->
  <media>
    <range_and_bearing id="rab" />
    <led id="leds" />
  </media>

  <!-- ****************** -->
  <!-- * Visualization * -->
  <!-- ****************** -->
  <!--
      Here you specify which visualization to use.
      You can also not specify a visualization at all, in which case ARGoS
      will run without showing anything.
      Having no visualization is useful when you run ARGoS in a batch of
      experiments to collect statistics.
      To know which visualizations are available, type at the command
      prompt:

      $ argos3 -q visualizations
  -->
  <visualization>
    <qt-opengl>
      <camera>
        <placements>
          <placement index="0" position="0,0,10" look_at="0,0,0" up="0,1,0" lens_focal_length="10" />
        </placements>
      </camera>
      <user_functions label="buzz_qt" />
    </qt-opengl>
  </visualization>

</argos-configuration>
